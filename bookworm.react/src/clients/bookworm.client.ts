//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class SearchClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * GetSearchResults
     * @param query (optional) 
     * @param offset (optional) 
     * @param limit (optional) 
     * @return Successfully retrieved results.
     */
    searchForWorks(query: string | undefined, offset: number | null | undefined, limit: number | null | undefined): Promise<BookwormResponse<SearchResponse>> {
        let url_ = this.baseUrl + "/api/Search?";
        if (query === null)
            throw new Error("The parameter 'query' cannot be null.");
        else if (query !== undefined)
            url_ += "query=" + encodeURIComponent("" + query) + "&";
        if (offset !== undefined && offset !== null)
            url_ += "offset=" + encodeURIComponent("" + offset) + "&";
        if (limit !== undefined && limit !== null)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSearchForWorks(_response);
        });
    }

    protected processSearchForWorks(response: Response): Promise<BookwormResponse<SearchResponse>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SearchResponse.fromJS(resultData200);
            return new BookwormResponse(status, _headers, result200);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            return throwException("The input is invalid.", status, _responseText, _headers);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("An error occurred while processing your request.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BookwormResponse<SearchResponse>>(new BookwormResponse(status, _headers, null as any));
    }
}

export class SearchResponse implements ISearchResponse {
    numFound?: number;
    start?: number;
    numFoundExact?: boolean;
    docs?: Work[];
    q?: string;
    offset?: number | undefined;

    constructor(data?: ISearchResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.numFound = _data["numFound"];
            this.start = _data["start"];
            this.numFoundExact = _data["numFoundExact"];
            if (Array.isArray(_data["docs"])) {
                this.docs = [] as any;
                for (let item of _data["docs"])
                    this.docs!.push(Work.fromJS(item));
            }
            this.q = _data["q"];
            this.offset = _data["offset"];
        }
    }

    static fromJS(data: any): SearchResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SearchResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["numFound"] = this.numFound;
        data["start"] = this.start;
        data["numFoundExact"] = this.numFoundExact;
        if (Array.isArray(this.docs)) {
            data["docs"] = [];
            for (let item of this.docs)
                data["docs"].push(item.toJSON());
        }
        data["q"] = this.q;
        data["offset"] = this.offset;
        return data;
    }
}

export interface ISearchResponse {
    numFound?: number;
    start?: number;
    numFoundExact?: boolean;
    docs?: Work[];
    q?: string;
    offset?: number | undefined;
}

export class Work implements IWork {
    key?: string;
    title?: string;
    cover_i?: number;
    author_name?: string[];

    constructor(data?: IWork) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key = _data["key"];
            this.title = _data["title"];
            this.cover_i = _data["cover_i"];
            if (Array.isArray(_data["author_name"])) {
                this.author_name = [] as any;
                for (let item of _data["author_name"])
                    this.author_name!.push(item);
            }
        }
    }

    static fromJS(data: any): Work {
        data = typeof data === 'object' ? data : {};
        let result = new Work();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["title"] = this.title;
        data["cover_i"] = this.cover_i;
        if (Array.isArray(this.author_name)) {
            data["author_name"] = [];
            for (let item of this.author_name)
                data["author_name"].push(item);
        }
        return data;
    }
}

export interface IWork {
    key?: string;
    title?: string;
    cover_i?: number;
    author_name?: string[];
}

export class BookwormResponse<TResult> {
    status: number;
    headers: { [key: string]: any; };
    result: TResult;

    constructor(status: number, headers: { [key: string]: any; }, result: TResult)
    {
        this.status = status;
        this.headers = headers;
        this.result = result;
    }
}

export class BookwormApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isBookwormApiException = true;

    static isBookwormApiException(obj: any): obj is BookwormApiException {
        return obj.isBookwormApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new BookwormApiException(message, status, response, headers, null);
}